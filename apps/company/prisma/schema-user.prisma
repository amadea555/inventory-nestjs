generator client {
  provider = "prisma-client-js"
  output   = "../../generated/prisma/company"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(100)
  email           String        @unique @db.VarChar(100)
  status          Boolean       @default(true)
  createdAt       DateTime      @db.Timestamp(6)
  updatedAt       DateTime?     @db.Timestamp(6)
  deletedAt       DateTime?     @db.Timestamp(6)
  companyUsers    CompanyUser[]
  customer        Customer[]
  category        Category[]
  product         Product[]
  order           Order[]
  orderDetail     OrderDetail[]
  transactionLog  TransactionLog[]

  @@map("companies")
}

model CompanyUser {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  email       String      @unique @db.VarChar(100)
  password    String      @db.VarChar(255)
  phoneNumber String      @db.VarChar(20)
  companyId   Int
  status      Boolean     @default(true)
  level       LevelStatus
  createdAt   DateTime    @db.Timestamp(6)
  updatedAt   DateTime?   @db.Timestamp(6)
  deletedAt   DateTime?   @db.Timestamp(6)
  otp         String?     @db.VarChar(6)
  otpExpired  DateTime?   @db.Timestamp(6)
  company     Company     @relation(fields: [companyId], references: [id])

  transactionLog  TransactionLog[]

  @@map("companyUsers")
}

model admins {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(100)
  email      String      @unique @db.VarChar(100)
  password   String      @db.VarChar(255)
  status     Boolean     @default(true)
  level      LevelStatus
  createdAt  DateTime    @db.Timestamp(6)
  updatedAt  DateTime?   @db.Timestamp(6)
  deletedAt  DateTime?   @db.Timestamp(6)
  otp        String?     @db.VarChar(6)
  otpExpired DateTime?   @db.Timestamp(6)
}

enum LevelStatus {
  SUPER
  NORMAL
}

model Customer {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(100)
  email        String    @db.VarChar(100) @unique
  phoneNumber  String    @db.VarChar(20)
  companyId    Int
  status       Boolean   @default(true)
  createdAt    DateTime  @db.Timestamp(6)
  updatedAt    DateTime? @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)

  // relations
  address      AddressCustomer[]
  company      Company  @relation(fields: [companyId], references: [id])
  order        Order[]

  @@map("customers")
}

model AddressCustomer {
  id           Int       @id @default(autoincrement())
  customerId   Int
  phoneNumber  String    @db.VarChar(20)
  address      String    @db.VarChar(255)
  label        String    @db.VarChar(100)
  note         String    @db.VarChar(100)
  createdAt    DateTime  @db.Timestamp(6)
  updatedAt    DateTime? @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)

  // relation
  customer     Customer  @relation(fields: [customerId], references: [id])

  @@map("addressCustomers")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  companyId   Int
  createdAt	  DateTime  @db.Timestamp(6)
  updatedAt	  DateTime? @db.Timestamp(6)
  deletedAt	  DateTime? @db.Timestamp(6)

  // relation
  company    Company    @relation(fields: [companyId], references: [id])
  product    Product[]

  @@map("categories")
}

model Product {
  id			    Int       @id @default(autoincrement())
  name 		    String    @db.VarChar(100)
  description String    @db.Text()
  price       Float
  qty         Int
  qtyBooked   Int       @default(0)
  qtySold     Int       @default(0)
  image       String?
  categoryId  Int
  companyId   Int
  createdAt	  DateTime  @db.Timestamp(6)
  updatedAt	  DateTime? @db.Timestamp(6)
  deletedAt	  DateTime? @db.Timestamp(6)

  // relation  
  category        Category  @relation(fields: [categoryId], references: [id])
  company         Company   @relation(fields: [companyId], references: [id])
  orderDetail     OrderDetail[]
  transactionLog  TransactionLog[]
  @@map("products")
}

model Order {
  id              Int           @id @default(autoincrement())
  customerId      Int 
  companyId       Int 
  grandTotal      Float
  paymentStatus   PaymentStatus
  shippingStatus  ShippingStatus?
  createdAt	      DateTime      @db.Timestamp(6)
  updatedAt	      DateTime?     @db.Timestamp(6)
  deletedAt	      DateTime?     @db.Timestamp(6)

  // relation
  company         Company       @relation(fields: [companyId], references: [id])
  customer        Customer      @relation(fields: [customerId], references: [id])
  orderDetail     OrderDetail[]

  @@map("Orders")
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

enum ShippingStatus {
  ONGOING
  DELIVERED
  CANCELED
}

model OrderDetail {
  id              Int           @id @default(autoincrement())
  orderId         Int 
  companyId       Int
  productId       Int
  qty             Int
  price           Float
  subTotal        Float
  createdAt	      DateTime      @db.Timestamp(6)
  updatedAt	      DateTime?     @db.Timestamp(6)
  deletedAt	      DateTime?     @db.Timestamp(6)

  // relation
  company         Company       @relation(fields: [companyId], references: [id])
  order           Order         @relation(fields: [orderId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])
  transactionLog  TransactionLog[]
  @@map("OrderDetails")
}

model TransactionLog {
  id              Int           @id @default(autoincrement())
  companyId       Int
  companyUserId   Int?
  productId       Int
  type            TransactionType
  quantity        Int
  orderDetailId   Int?          
  createdAt       DateTime       @db.Timestamp(6)  @default(now())
  transactionDate DateTime       @db.Timestamp(6)
  deletedAt       DateTime?      @db.Timestamp(6)
  remarks         String

  // relation
  company         Company       @relation(fields: [companyId], references: [id])
  companyUser     CompanyUser?   @relation(fields: [companyUserId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])
  orderDetail     OrderDetail?  @relation(fields: [orderDetailId], references: [id])
@@map("TransactionLogs")
}

enum TransactionType {
  IN
  OUT
}